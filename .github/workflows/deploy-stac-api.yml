name: Deploy STAC API

on:
  push:
    branches:
      - develop

jobs:
  deploy-stac-api:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - environment: asf-stac-test
            template_bucket: cf-templates-aubvn3i9olmk-us-west-2
            domain_name: stac-test.asf.alaska.edu

    environment:
      name: ${{ matrix.environment }}

    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - uses: actions/setup-python@v3
        with:
          python-version: 3.9
      - name: Install Lambda dependencies
        run: make -s install-lambda-deps
      - name: Install pyPgSTAC
        run: make -s install-pypgstac
      - name: Deploy CloudFormation stack
        run: |
          make -s deploy \
            stack_name=${{ matrix.environment }} \
            s3_bucket=${{ matrix.template_bucket }} \
            cloudformation_role_arn=${{ secrets.CLOUDFORMATION_ROLE_ARN }} \
            db_admin_password=${{ secrets.DB_ADMIN_PASSWORD }} \
            db_read_password=${{ secrets.DB_READ_PASSWORD }} \
            vpc_id=${{ secrets.VPC_ID }} \
            subnet_ids=${{ secrets.SUBNET_IDS }} \
            cidr_ip=${{ secrets.CIDR_IP }} \
            domain_name=${{ matrix.domain_name }} \
            certificate_arn=${{ secrets.CERTIFICATE_ARN }}

      - name: Get database host
        run: |
          echo "DATABASE_HOST=$(aws cloudformation describe-stacks \
                                --stack-name ${{ matrix.environment }} \
                                --query 'Stacks[0].Outputs[?OutputKey==`DatabaseHost`].OutputValue' \
                                --output text)" >> $GITHUB_ENV
      - name: Install or upgrade PostGIS
        run: make -s install-or-upgrade-postgis db_host=$DATABASE_HOST db_admin_password=${{ secrets.DB_ADMIN_PASSWORD }}
      - name: Install or upgrade PgSTAC
        run: make -s pypgstac-migrate db_host=$DATABASE_HOST db_admin_password=${{ secrets.DB_ADMIN_PASSWORD }}
      - name: Configure database roles
        run: |
          make -s configure-database-roles \
            db_host=$DATABASE_HOST \
            db_admin_password=${{ secrets.DB_ADMIN_PASSWORD }} \
            db_read_password=${{ secrets.DB_READ_PASSWORD }}
